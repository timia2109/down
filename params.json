{"name":"Down","tagline":"Like jQuery for ComputerCraft. Use _ instead of $. Communtiy based so fork and create pull request.","body":"# down\r\nLike jQuery for ComputerCraft. Use _ instead of $. \r\n##### What can _ and for what is it?\r\ndown has the same intent like jQuery. It just should be SHORT.\r\nLet me show you how short down can be:\r\n**Load serialized table**\r\n```lua\r\n-- Normal way:\r\nlocal file = fs.open(\"filename\",\"r\")\r\nlocal data = textutils.unserialize( file.readAll() )\r\nfile.close()\r\n-- -> 3 Lines\r\n-- Let's make it in down\r\nlocal data = _.getFile(\"filename\")\r\n```\r\n**Use APIs**\r\n```lua\r\n-- Normal way:\r\nif fs.exists(\"apis/api\") then\r\n\tos.loadAPI(\"apis/api\")\r\nelse\r\n\tlocal request = http.get(\"http://apiurl\")\r\n\tif request then\r\n\t\tlocal file = fs.open(\"apis/api\",\"w\")\r\n\t\tfile.write( request.readAll() )\r\n\t\tfile.close()\r\n\t\trequest.close()\r\n\t\tos.loadAPI(\"apis/api\")\r\n\telse\r\n\t\terror(\"API not found! Error on downloading API!\")\r\n\tend\r\nend\r\n-- And now with down:\r\n_.loadAPI(\"api\",\"http://apiurl\")\r\n```\r\n**OOP with Lua**\r\n(as example a simple button)\r\n```lua\r\n-- Normal:\r\nlocal function newButton( pX, pY, pLen, pLabel, pCol)\r\n\tlocal button = {\r\n\t\tx = pX,\r\n\t\ty = pY,\r\n\t\tlabel = pLabel,\r\n\t\tlen = pLen,\r\n\t\tcolor = pCol\r\n\t}\r\n\tlocal metaButton = {}\r\n\tfunction metaButton.draw(self)\r\n\t\tpaintutils.drawLine( self.x, self.y, self.x+self.len, self.y, self.color)\r\n\t\tterm.setCursorPos(self.x, self.y)\r\n\t\twrite(self.label)\r\n\tend\r\n\tfunction metaButton.isClicked(self, pX, pY)\r\n\t\treturn pY == self.y and self.x <= pX and self.x+self.len >= pX\r\n\tend\r\n\tsetmetatable(button, {__index=metaButton})\r\n\treturn button\r\nend\r\nlocal button = newButton(1,1,5,\"Hallo\", colors.red)\r\nbutton:draw()\r\n-- With down:\r\nlocal button = {}\r\nfunction button.init(self, pX, pY, pLen, pLabel, pCol)\r\n\tself.x = pX\r\n\tself.y = pY\r\n\tself.len = pLen\r\n\tself.label = pLabel\r\n\tself.color = pCol \r\nend\r\nfunction button.draw(self)\r\n\tpaintutils.drawLine( self.x, self.y, self.x+self.len, self.y, self.color)\r\n\tterm.setCursorPos(self.x, self.y)\r\n\twrite(self.label)\t\r\nend\r\nfunction button.isClicked(self, pX, pY)\r\n\treturn pY == self.y and self.x <= pX and self.x+self.len >= pX\r\nend\r\n_.newClass(\"Button\",button)\r\nlocal button = new.Button(1,2,8,\"down [_]\",colors.blue) --All Objects can be created with new.OBJECTNAME( args )\r\nbutton:draw()\r\n```\r\nYou also can create Sub-Classes with down!\r\n\r\nIs that enouth to use down?\r\n##### Want more functions?\r\ndown is communtiy based, so fork and create a pull request. And if it work, then I will include it!\r\n##### Can I use it in my OS?\r\nShure feel free to use down! But I recommend, that you not copy down, let it load from this repo so you ever have the newest version!\r\n##### How I load down?\r\ndown MUST BE LOADED WITH shell.run(\"/down\"), because it use _G\r\n## Usage:\r\n```Lua\r\nif not _ then\r\n\tif not fs.exists(\"/down\") then\r\n\t\tlocal req = http.get(\"https://raw.github.com/timia2109/down/master/down.lua\")\r\n\t\tlocal f = fs.open(\"down\",\"w\")\r\n\t\tf.write(req.readAll())\r\n\t\tf.close()\r\n\tend\r\n\tshell.run(\"/down\")\r\nend\r\n```\r\n\r\n## Methods\r\n|Name|return|Desc|\r\n|---|---|---|\r\n|_.import(table pImport)|nil|Import the methods of pImport into _(down)|\r\n|_.wget(string pUrl|table **wget**, [table pPost], [table pHeader])|string|Start a request to pUrl and return the content|\r\n|_.dloadFile(string pUrl, string pFile)|nil|Download the url and put it in pFile|\r\n|_.execUrl(string pUrl, [table fenv] or [_G])|return value of code|\r\n|_.meta(table pTable, [table pMetatable])|table|return metatable of pTable and if pMetatable set new metatable|\r\n|_.putFile(string filename, mixed content)|nil|Save content into filename. Auto-serialize!|\r\n|_.getFile(string filename)|(string|table)/false|Get content of filename. Auto-unserialize|\r\n|_.addToFile(string filename, string add, [boolean newLine])|boolean|Add *add* to *filename*. If *newLine* then it add \"\\n\" before that|\r\n|_.cloneTable(table pTable, [table into], [function if])|table|Copy *pTable* into the *return* table or into the *into* table. If *if* then only copy if it return true|\r\n|_.api(string apiname, string url)|nil|Load the API *apiname*, if not exists it will downloaded|\r\n|_.checkVersion(string version1, string version2)|number|return 0 if *v1* and *v2* are equal. return *1* if *v1* is newer, return *2* if *v2* is newer `v1 = \"1.3443.464.06.4\"`|\r\n|_.isset(boolean if, function do)|nil|If *if* == true then exec *do*|\r\n|_.config(string pName)|table (configObject)|Load a config table|\r\n|_.isEmpty(mixed pVal)|boolean|See examples to watch how it works|\r\n|_.isTable(mixed val)|boolean|Self explain|\r\n|_.isBoolean(mixed val)|boolean|Self explain|\r\n|_.isString(mixed val)|boolean|Self explain|\r\n|_.isNumber(mixed val)|boolean|Self explain|\r\n|_.isNil(mixed val)|boolean|Self explain|\r\n|_.isFunction(mixed val)|boolean|Self explain|\r\n|_.isObject(table Table)|boolean|return true when it's a child of _Object|\r\n|_.isA(string Classname, obj Object)|boolean|return true when it is a Object of the class Classname|\r\n|_.isAttr(string Attr)|boolean|Return true when Attr is not defined by down's classmanagment|\r\n|_.serialize(table Table, [string **format**])|string|Serialize the table into a string|\r\n|_.unserialize(string Value, [string **format**][\"lua\"])|table|Create a table from the string|\r\n|_.sortField(table Table, string Field)|table|Sort the table with Selection Sort. table[i].field must be a number|\r\n\r\n|_.newClass(string Name, table class, [table Mainclass]|nil|Creates a new Class from a Table|\r\n|new.*CLASSNAME*(*CLASS ARGS*)|table/class|Create a new Object of a Class|\r\n\r\n## Down StringTypes\r\nWhen a Parameter is written bold then you must use a allowed String. \r\nExample:\r\n_.serialize(table pTable, string **format**)\r\n```Lua\r\n--Use:\r\n_.serialize( { ... } , \"json\")\r\n```\r\n\r\n**format:**\r\n - json\r\n - lua\r\n \r\n**url**\r\n -\r\n\r\n**wget**\r\n```lua\r\n--wTable example\r\nlocal wTable = {\r\n\turl = \"http://example.com\", \t--The request URL\r\n\tpost = { \t\t\t--Table for the HTTP Post Parameters\r\n\t\tkey = value,\r\n\t\ttoken = \"12345\"\t\t--Example Value\r\n\t},\r\n\tget = {\t\t\t\t--Table for URL\r\n\t\tkey = value,\r\n\t\tdata = \"lua\"\t\t--Result: \"http://example.com?data=lua& <- The last & dosn't matter\r\n\t}\r\n\theader = {\t\t\t--HTTP Headers\r\n\t\tkey = value,\r\n\t\tUser-Agent = \"CC\",\t--Normal your Browser Identy\r\n\t}\r\n}\r\n``` \r\n\r\n\r\n## Examples\r\n#### _.is*()\r\n```Lua\r\n_.isTable({}) --true\r\n_.isTable(0) --false\r\n_.isString(\"\") --true\r\n_.isString(0) --false\r\n_.isNumber(0) --true\r\n_.isFunction(_.isNumber) -true\r\n_.isFunction(_.isNumber(0)) --false\r\n```\r\n\r\n#### _.isEmpty()\r\n```Lua\r\n_.isEmpty({}) --true\r\n_.isEmpty( { 1 } ) --false\r\n_.isEmpty( \"\" ) --true\r\n_.isEmpty( \"nope\" ) --false\r\n_.isEmpty() --true\r\n```\r\n\r\n#### Class\r\n```Lua\r\nlocal testClass = {}\r\nfunction testClass.init(self, pAttribute)\r\n\tself.attribute = pAttribute\r\nend\r\nfunction testClass.sayHey(self)\r\n\tprint(\"Hello \"..self['attribute']..\"!\")\r\nend\r\n\r\n_.newClass(\"testClass\",testClass)\r\nlocal test = new.testClass(\"World\")\r\ntest.sayHey()\r\n-> \"Hello World!\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}